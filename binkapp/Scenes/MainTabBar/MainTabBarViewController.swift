//
//  MainTabBarViewController.swift
//  binkapp
//
//  Created by Paul Tiriteu on 22/07/2019.
//  Copyright (c) 2019 Bink. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainTabBarDisplayLogic: class
{
    func displaySomething(viewModel: MainTabBar.Something.ViewModel)
}

class MainTabBarViewController: UIViewController, MainTabBarDisplayLogic
{
    @IBOutlet weak var tabBar: UITabBar!
    @IBOutlet weak var displayedControllerView: UIView!
    
    var interactor: MainTabBarBusinessLogic?
    var router: (NSObjectProtocol & MainTabBarRoutingLogic & MainTabBarDataPassing)?
    
    var childrenViewControllers: [UIViewController] = []
    var selectedTabBarOption = 0
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: "MainTabBarViewController", bundle: Bundle(for: MainTabBarViewController.self))
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = MainTabBarInteractor()
        let presenter = MainTabBarPresenter()
        let router = MainTabBarRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()

        self.navigationController?.setNavigationBarHidden(true, animated: true)
        tabBar.delegate = self
        
        doSomething()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = MainTabBar.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: MainTabBar.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
        var items = [UITabBarItem]()
        
        items.append(viewModel.getTabBarLoyaltyButton())
        items.append(viewModel.getTabBarAddButton())
        items.append(viewModel.getTabBarPaymentButton())
        items[2].isEnabled = false
        tabBar.setItems(items, animated: true)

        for vc in viewModel.childViewControllers {
            childrenViewControllers.append(vc)
        }
        displayedControllerView.addSubview(childrenViewControllers[0].view)
        tabBar.selectedItem = items[0]
    }
}

extension MainTabBarViewController: UITabBarDelegate {
    func tabBar(_ tabBar: UITabBar, didSelect item: UITabBarItem) {
        childrenViewControllers[selectedTabBarOption].view.removeFromSuperview()
        switch item.tag {
        case 0: displayedControllerView.addSubview(childrenViewControllers[0].view)
            selectedTabBarOption = 0
            break
        case 1: displayedControllerView.addSubview(childrenViewControllers[1].view)
            selectedTabBarOption = 1
            break
        case 2: displayedControllerView.addSubview(childrenViewControllers[2].view)
            selectedTabBarOption = 2
            break
        default: break
        }
    }
}

