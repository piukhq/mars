fastlane_version "1.104.0"

default_platform :ios

platform :ios do

  # Lifecycle

  before_all do |lane, options|

    ENV["MATCH_PASSWORD"] = "c3rt1f1cat3s"

    # This excludes these targets from the code coverage, required if we just want BinkApp posted to Slack
    ENV["COVERAGE_EXCLUDE_TARGETS"] = ""

    # This allows the command line iTunes Connect uploaded to get through out firewall, otherwise all connections are blocked
    ENV["DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS"] = "-t DAV"

  end

  after_all do |lane|
  end

  error do |lane, exception|
      notification(
        subtitle: "Fastlane: #{lane} failed",
        message: exception.message
      )
  end

  # Certificate management

  desc "Retrieve all the certificates for all targets and configures your machine to compile against devices"
  lane :setup do

    # Bink

    match(type: "appstore", app_identifier: "com.bink.wallet", readonly: true)
    match(type: "adhoc", app_identifier: "com.bink.wallet", readonly: true)
    match(type: "development", app_identifier: "com.bink.wallet.alpha", readonly: true)
    match(type: "adhoc", app_identifier: "com.bink.wallet.beta", readonly: true)
    match(type: "appstore", app_identifier: "com.bink.mybank.poc", readonly: true)
    match(type: "adhoc", app_identifier: "com.bink.mybank.poc", readonly: true)
    match(type: "development", app_identifier: "com.bink.mybank.poc", readonly: true)

  end

  # Add device

  desc "Adds a device to the portal"
  lane :addDevice do |parameters|
    if !parameters[:name]
    raise "No name specified"
    elsif !parameters[:uuid]
    raise "No UUID specified"
    end

    register_devices(
      devices: {
      parameters[:name] => parameters[:uuid]
     }
    )

    setupForce
  end

  desc "Retrieve and force update all the certificates for all targets and configures your machine to compile against devices, including new ones. NOTE: This should only be run if new devices are required in the profiles and certificates"
  lane :setupForce do

    # Bink

    match(type: "development", app_identifier: "com.bink.wallet.alpha", readonly: false, force_for_new_devices: true)
    match(type: "appstore", app_identifier: "com.bink.wallet", readonly: false, force_for_new_devices: true)
    match(type: "adhoc", app_identifier: "com.bink.wallet", readonly: false, force_for_new_devices: true)
    match(type: "adhoc", app_identifier: "com.bink.wallet.beta", readonly: false, force_for_new_devices: true)
    match(type: "adhoc", app_identifier: "com.bink.mybank.poc", readonly: false, force_for_new_devices: true)
    match(type: "appstore", app_identifier: "com.bink.mybank.poc", readonly: false, force_for_new_devices: true)
    match(type: "development", app_identifier: "com.bink.mybank.poc", readonly: false, force_for_new_devices: true)

  end

  desc "Submit branch to TestFlight"
  lane :beta do |options|
    app_store_connect_api_key(
      key_id: ENV["FASTLANE_ASC_KEY_ID"],
      issuer_id: ENV["FASTLANE_ASC_ISSUER_ID"],
      key_content: ENV["FASTLANE_ASC_P8"],
      in_house: false
    )

    build_app(
      workspace: "binkapp.xcworkspace", 
      scheme: "binkapp app store"
    )

    upload_to_testflight(
      distribute_external: true, 
      groups: "Mobile Squad", 
      changelog: "No tests notes"
    )

    push_to_git_remote(
      remote: "origin",
      local_branch: ENV["BITRISE_GIT_BRANCH"],
      remote_branch: ENV["BITRISE_GIT_BRANCH"],
    )

    sentry_upload_dsym(
     auth_token: ENV["SENTRY_AUTH_TOKEN"],
     org_slug: 'bink',
     project_slug: 'mars',
     dsym_path: 'Bink.app.dSYM.zip'
    )
  end

  desc "Increment the build number and commit to git"
  lane :bump do |options|
    increment_build_number
    commit_version_bump
  end

end
