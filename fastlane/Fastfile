fastlane_version "1.104.0"

default_platform :ios

platform :ios do

  # Lifecycle

  before_all do |lane, options|

    ENV["MATCH_PASSWORD"] = "c3rt1f1cat3s"

    # This excludes these targets from the code coverage, required if we just want BinkApp posted to Slack
    ENV["COVERAGE_EXCLUDE_TARGETS"] = ""

    # This allows the command line iTunes Connect uploaded to get through out firewall, otherwise all connections are blocked
    # ENV["DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS"] = "-t DAV"

  end

  after_all do |lane|
  end

  error do |lane, exception|
      notification(
        subtitle: "Fastlane: #{lane} failed",
        message: exception.message
      )
  end

  # Certificate management

  desc "Retrieve all the certificates for all targets and configures your machine to compile against devices"
  lane :setup do

    # Bink

    match(type: "appstore", app_identifier: "com.bink.wallet", readonly: true)
    match(type: "adhoc", app_identifier: "com.bink.wallet", readonly: true)
    match(type: "development", app_identifier: "com.bink.wallet.alpha", readonly: true)
    match(type: "adhoc", app_identifier: "com.bink.wallet.beta", readonly: true)
    match(type: "appstore", app_identifier: "com.bink.mybank.poc", readonly: true)
    match(type: "adhoc", app_identifier: "com.bink.mybank.poc", readonly: true)
    match(type: "development", app_identifier: "com.bink.mybank.poc", readonly: true)
    match(type: "development", app_identifier: "com.bink.wallet.alpha.widget", readonly: true)
    match(type: "adhoc", app_identifier: "com.bink.wallet.beta.widget", readonly: true)
    match(type: "appstore", app_identifier: "com.bink.wallet.widget", readonly: true)
    match(type: "development", app_identifier: "com.bink.wallet.alpha.watch", readonly: true)
    match(type: "adhoc", app_identifier: "com.bink.wallet.beta.watch", readonly: true)
    match(type: "appstore", app_identifier: "com.bink.wallet.watch", readonly: true)
    match(type: "development", app_identifier: "com.bink.wallet.alpha.watch.extension", readonly: true)
    match(type: "adhoc", app_identifier: "com.bink.wallet.beta.watch.extension", readonly: true)
    match(type: "appstore", app_identifier: "com.bink.wallet.watch.extension", readonly: true)

    # For MR builds to Testflight
    match(type: "appstore", app_identifier: "com.bink.wallet.beta", readonly: true)
    match(type: "appstore", app_identifier: "com.bink.wallet.beta.widget", readonly: true)
    match(type: "appstore", app_identifier: "com.bink.wallet.beta.watch", readonly: true)
    match(type: "appstore", app_identifier: "com.bink.wallet.beta.watch.extension", readonly: true)

  end

  # Add device

  desc "Adds a device to the portal"
  lane :addDevice do |parameters|
    if !parameters[:name]
    raise "No name specified"
    elsif !parameters[:uuid]
    raise "No UUID specified"
    end

    register_devices(
      devices: {
      parameters[:name] => parameters[:uuid]
     }
    )

    setupForce
  end

  desc "Retrieve and force update all the certificates for all targets and configures your machine to compile against devices, including new ones. NOTE: This should only be run if new devices are required in the profiles and certificates"
  lane :setupForce do

    # Bink

    match(type: "development", app_identifier: "com.bink.wallet.alpha", readonly: false, force_for_new_devices: true)
    match(type: "appstore", app_identifier: "com.bink.wallet", readonly: false, force_for_new_devices: true)
    match(type: "adhoc", app_identifier: "com.bink.wallet", readonly: false, force_for_new_devices: true)
    match(type: "adhoc", app_identifier: "com.bink.wallet.beta", readonly: false, force_for_new_devices: true)
    match(type: "adhoc", app_identifier: "com.bink.mybank.poc", readonly: false, force_for_new_devices: true)
    match(type: "appstore", app_identifier: "com.bink.mybank.poc", readonly: false, force_for_new_devices: true)
    match(type: "development", app_identifier: "com.bink.mybank.poc", readonly: false, force_for_new_devices: true)
    match(type: "development", app_identifier: "com.bink.wallet.alpha.widget", readonly: false, force_for_new_devices: true)
    match(type: "adhoc", app_identifier: "com.bink.wallet.beta.widget", readonly: false, force_for_new_devices: true)
    match(type: "appstore", app_identifier: "com.bink.wallet.widget", readonly: false, force_for_new_devices: true)
    match(type: "development", app_identifier: "com.bink.wallet.alpha.watch", readonly: false, force_for_new_devices: true)
    match(type: "adhoc", app_identifier: "com.bink.wallet.beta.watch", readonly: false, force_for_new_devices: true)
    match(type: "appstore", app_identifier: "com.bink.wallet.watch", readonly: false, force_for_new_devices: true)
    match(type: "development", app_identifier: "com.bink.wallet.alpha.watch.extension", readonly: false, force_for_new_devices: true)
    match(type: "adhoc", app_identifier: "com.bink.wallet.beta.watch.extension", readonly: false, force_for_new_devices: true)
    match(type: "appstore", app_identifier: "com.bink.wallet.watch.extension", readonly: false, force_for_new_devices: true)

    # For MR builds to Testflight
    match(type: "appstore", app_identifier: "com.bink.wallet.beta", readonly: false, force_for_new_devices: true)
    match(type: "appstore", app_identifier: "com.bink.wallet.beta.widget", readonly: false, force_for_new_devices: true)
    match(type: "appstore", app_identifier: "com.bink.wallet.beta.watch", readonly: false, force_for_new_devices: true)
    match(type: "appstore", app_identifier: "com.bink.wallet.beta.watch.extension", readonly: false, force_for_new_devices: true)

  end

  desc "Submit merge request build to TestFlight"
  lane :mr do |options|
    app_store_connect_api_key(
      key_id: ENV["FASTLANE_ASC_KEY_ID"],
      issuer_id: ENV["FASTLANE_ASC_ISSUER_ID"],
      key_content: ENV["FASTLANE_ASC_P8"],
      in_house: false
    )

    increment_build_number(build_number: options[:build_number])

target =
    run_tests(
      workspace: "binkapp.xcworkspace",
      device: "iPhone 12 Pro",
      scheme: "binkapp tests"
    )

    xcov(
      workspace: "binkapp.xcworkspace",
      scheme: "binkapp tests",
      output_directory: "fastlane/xcov_output",
      markdown_report: true,
      xccov_file_direct_path: ENV['BITRISE_XCRESULT_PATH'],
      include_targets: "Bink.app"
    )

    build_app(
      workspace: "binkapp.xcworkspace",
      scheme: "binkapp app store (internal)"
    )

    upload_to_testflight(
      changelog: "Merge request build for branch: " + options[:branch_name],
      skip_waiting_for_build_processing: true
    )
  end

  desc "Submit nightly Develop build to TestFlight"
  lane :nightly do |options|
    app_store_connect_api_key(
      key_id: ENV["FASTLANE_ASC_KEY_ID"],
      issuer_id: ENV["FASTLANE_ASC_ISSUER_ID"],
      key_content: ENV["FASTLANE_ASC_P8"],
      in_house: false
    )

    increment_build_number(build_number: options[:build_number])

    run_tests(
      workspace: "binkapp.xcworkspace",
      device: "iPhone 12 Pro",
      code_coverage: true,
      result_bundle: true,
      scheme: "binkapp tests",
      testplan: "nightly"
    )

    xcov(
      workspace: "binkapp.xcworkspace",
      scheme: "binkapp tests",
      output_directory: "fastlane/xcov_output",
      markdown_report: true
    )

    coverage = sh("cat xcov_output/report.md | grep -i \"Current coverage for Bink.app\"")

    teams_bot(
      teams_url: "https://hellobink.webhook.office.com/webhookb2/bf220ac8-d509-474f-a568-148982784d19@a6e2367a-92ea-4e5a-b565-723830bcc095/IncomingWebhook/34097856b3e443519be3c77cfdd596ab/eec2dc71-9d13-4783-bb76-91e60ae9b1e9",
      title: "Unit Tests code coverage",
      text: coverage,
      activity_title: "iOS Bink App",
      theme_color: "321244",
      use_markdown: false
    )

    build_app(
      workspace: "binkapp.xcworkspace",
      scheme: "binkapp app store (internal)"
    )

    upload_to_testflight(
      changelog: "Nightly build from Develop branch",
      distribute_external: true,
      groups: "Bink Internal",
      reject_build_waiting_for_review: true,
      skip_waiting_for_build_processing: false
    )
  end

  desc "Submit Develop build to TestFlight"
  lane :develop do |options|
    app_store_connect_api_key(
      key_id: ENV["FASTLANE_ASC_KEY_ID"],
      issuer_id: ENV["FASTLANE_ASC_ISSUER_ID"],
      key_content: ENV["FASTLANE_ASC_P8"],
      in_house: false
    )

    increment_build_number(build_number: options[:build_number])

    build_app(
      workspace: "binkapp.xcworkspace",
      scheme: "binkapp app store (internal)"
    )

    upload_to_testflight(
      changelog: "Latest Develop build",
      distribute_external: true,
      groups: "Bink Internal",
      reject_build_waiting_for_review: true,
      skip_waiting_for_build_processing: true
    )
  end

  desc "Submit production build to TestFlight"
  lane :beta do |options|
    app_store_connect_api_key(
      key_id: ENV["FASTLANE_ASC_KEY_ID"],
      issuer_id: ENV["FASTLANE_ASC_ISSUER_ID"],
      key_content: ENV["FASTLANE_ASC_P8"],
      in_house: false
    )

    increment_build_number(build_number: options[:build_number])

    run_tests(
      workspace: "binkapp.xcworkspace",
      device: "iPhone 12 Pro",
      scheme: "binkapp tests"
    )

    build_app(
      workspace: "binkapp.xcworkspace",
      scheme: "binkapp app store"
    )

    upload_to_testflight(
      distribute_external: true,
      groups: "Mobile Squad",
      changelog: "No tests notes",
      skip_waiting_for_build_processing: true
    )

    # push_to_git_remote(
    #   remote: "origin",
    #   local_branch: ENV["BITRISE_GIT_BRANCH"],
    #   remote_branch: ENV["BITRISE_GIT_BRANCH"],
    # )

    beta_dsym
  end

  desc "Increment the build number and commit to git"
  lane :bump do |options|
    increment_build_number
    clean_build_artifacts
    commit_version_bump
  end

  desc "Submit dysm to Sentry for Firebase App Distribution"
  lane :beta_dsym do
    sentry_upload_dsym(
      auth_token: ENV["SENTRY_AUTH_TOKEN"],
      org_slug: 'bink',
      project_slug: 'mars',
      dsym_path: ENV["BITRISE_DSYM_PATH"]
    )
  end

end
